1) Дана последовательность N целых чисел. Найти сумму простых чисел.
2) Дана последовательность из N целых чисел. Верно ли, что последовательность является возрастающей.
3) Дан массив целых чисел. Заменить отрицательные элементы на сумму индексов двузначных элементов массива.
5) * Отвалидировать доску судоку
/*Требования
        Объявлена доска 9 x 9 необходимо отвалидировать в соответствии с правилами
        1.	Каждая строка должна содержать цифру 1-9 без повторения
        2.	Каждая колонка должна содержать цифру 1-9 без повторения
        3.	Каждый под блок из 9 элементов 3 x 3 должна содержать цифру 1-9 без повторения
        Ограничения
        •	board.length == 9
        •	board[i].length == 9
        •	board[i][j] значение число или '.'
*/
public class Main {
    public static void main(String[] args) {
        char[][] board = {
                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};

        System.out.println("Validete:" + isValidSudoku(board));
    }


нужен динамический массив, алгоритм см зеленая тетрадь
//    public static int[] collectAllPrimes1(int[] arr) {
//
//        String primeColl;
//        String dividers = "1 ";
//        int[] divider = new int[] {2, 3, 5, 7};
//
//        for (int i = 2; i <= arr[arr.length]; ) {
//
//            for (int j = 0; j < i; j++) {
//                if(i%divider[j]!=0){ i++; }
//                else{j++; if j == arr[i]{
//                        dividers += Integer.toString(j);
//                    dividers+=  ", ";
//                }
//                }
//
//            }
//        }
//        if (arr[i] == 1){ primeColl += Integer.toString(arr[i]);}
//        int[] divideColl = ;
//        for (int i = 0; i < arr.length - 1; i++) {
//if ()
//        }
//        return primeColl;
//    }


